{"version":3,"sources":["components/header.js","components/form.js","components/itemForm.js","components/createProject.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","Form","props","state","po_number","representative","customer_name","shipping_address","email_address","invoice_address","items","item_number","handleChange","bind","handleSubmit","objectifyForm","formArray","returnArray","i","length","event","this","setState","target","name","value","preventDefault","form","data","window","confirm","JSON","stringify","fetch","method","body","console","log","reset","onChange","onSubmit","htmlFor","id","type","ItemForm","item_numer","vendor","quantity","description","unit_cost","unit_sales_price","insurance_needed","sales_tax_needed","CreateProject","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0PAceA,G,6KAVP,OACI,6BACI,4BAAQC,UAAU,cACd,6C,GALCC,IAAMC,Y,cCyHZC,E,kDAxHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,UAAW,GACXC,eAAgB,GAChBC,cAAe,GACfC,iBAAkB,GAClBC,cAAe,GACfC,gBAAiB,GACjBC,MAAO,CACLC,YAAa,KAGjB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBAfJ,E,0DAkBLG,GAGZ,IADA,IAAIC,EAAc,GACTC,EAAI,EAAGA,EAAIF,EAAUG,OAAQD,IACpCD,EAAYD,EAAUE,GAAV,MAAwBF,EAAUE,GAAV,MAEtC,OAAOD,I,mCAGIG,GAAQ,IAAD,OAClBC,KAAKC,SAAL,eAAiBF,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOE,QAAS,WAAO,IAAD,EAQ3D,EAAKtB,MARsD,EAE7DC,UAF6D,EAG7DC,eAH6D,EAI7DC,cAJ6D,EAK7DC,iBAL6D,EAM7DC,cAN6D,EAO7DC,qB,mCAKOW,GACXA,EAAMM,iBACN,IAAMC,EAAOP,EAAMG,OACbK,EAAOP,KAAKN,cAAcY,GAE5BE,OAAOC,QAAQ,iBAAmBC,KAAKC,UAAUJ,MACnDK,MAAM,gCAAiC,CACrCC,OAAQ,OACRC,KAAMJ,KAAKC,UAAUJ,KAEvBQ,QAAQC,IAAI,UAAYN,KAAKC,UAAUJ,KAEvCR,EAAMG,OAAOe,U,+BAIDjB,KAAKlB,MAEnB,OACE,6BACE,yBAAKL,UAAU,aACb,0BAAMyC,SAAUlB,KAAKT,aAAe4B,SAAUnB,KAAKP,cACjD,4BACE,4BACE,2BAAO2B,QAAQ,aAAf,cACA,2BAAOC,GAAG,YAAYlB,KAAK,YAAYmB,KAAK,UAE9C,4BACE,2BAAOF,QAAQ,kBAAf,mBACA,2BAAOC,GAAG,iBAAiBlB,KAAK,iBAAiBmB,KAAK,UAExD,4BACE,2BAAOF,QAAQ,iBAAf,kBACA,2BAAOC,GAAG,gBAAgBlB,KAAK,gBAAgBmB,KAAK,UAEtD,4BACE,2BAAOF,QAAQ,oBAAf,qBACA,2BAAOC,GAAG,mBAAmBlB,KAAK,mBAAmBmB,KAAK,UAE5D,4BACE,2BAAOF,QAAQ,iBAAf,kBACA,2BAAOC,GAAG,gBAAgBlB,KAAK,gBAAgBmB,KAAK,WAEtD,4BACE,2BAAOF,QAAQ,mBAAf,0BACA,2BAAOC,GAAG,kBAAkBlB,KAAK,kBAAkBmB,KAAK,WAG5D,4BAAQA,KAAK,UAAb,kBAKJ,yBAAK7C,UAAU,WACb,+BACE,+BACE,4BACE,yCACA,8CACA,6CACA,wCACA,qCACA,sDAEF,4BACE,4BAAKuB,KAAKlB,MAAMC,WAChB,4BAAKiB,KAAKlB,MAAME,gBAChB,4BAAKgB,KAAKlB,MAAMG,eAChB,4BAAKe,KAAKlB,MAAMI,kBAChB,4BAAKc,KAAKlB,MAAMK,eAChB,4BAAKa,KAAKlB,MAAMM,0B,GA/GbV,IAAMC,WCwIV4C,E,kDAvIb,WAAY1C,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACX0C,WAAY,GACZC,OAAQ,GACRC,SAAU,GACVC,YAAa,GACbC,UAAW,GACXC,iBAAkB,GAClBC,iBAAkB,GAClBC,iBAAkB,IAGpB,EAAKxC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBAfJ,E,0DAkBLG,GAIZ,IAFA,IAAIC,EAAc,GAETC,EAAI,EAAGA,EAAIF,EAAUG,OAAQD,IACpCD,EAAYD,EAAUE,GAAV,MAAwBF,EAAUE,GAAV,MAEtC,OAAOD,I,mCAGIG,GAAQ,IAAD,OAClBC,KAAKC,SAAL,eAAiBF,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOE,QAAS,WAAO,IAAD,EAU3D,EAAKtB,MAVsD,EAE7D0C,WAF6D,EAG7DC,OAH6D,EAI7DC,SAJ6D,EAK7DC,YAL6D,EAM7DC,UAN6D,EAO7DC,iBAP6D,EAQ7DC,iBAR6D,EAS7DC,sB,mCAKOhC,GACXA,EAAMM,iBACN,IAAMC,EAAOP,EAAMG,OACbK,EAAOP,KAAKN,cAAcY,GAC5BE,OAAOC,QAAQ,iBAAmBC,KAAKC,UAAUJ,MACnDK,MAAM,6BAA8B,CAClCC,OAAQ,OACRC,KAAMJ,KAAKC,UAAUJ,KAEvBR,EAAMG,OAAOe,QACbF,QAAQC,IAAI,UAAYN,KAAKC,UAAUJ,O,+BAKzC,OACE,6BACE,yBAAK9B,UAAU,uBACb,0BAAMyC,SAAUlB,KAAKT,aAAc4B,SAAUnB,KAAKP,cAChD,4BACE,4BACE,2BAAO2B,QAAQ,eAAf,gBACA,2BAAOC,GAAG,cAAclB,KAAK,cAAcmB,KAAK,UAElD,4BACE,2BAAOF,QAAQ,UAAf,WACA,2BAAOC,GAAG,SAASlB,KAAK,SAASmB,KAAK,UAExC,4BACE,2BAAOF,QAAQ,YAAf,aACA,2BAAOC,GAAG,WAAWlB,KAAK,WAAWmB,KAAK,UAE5C,4BACE,2BAAOF,QAAQ,eAAf,gBACA,2BAAOC,GAAG,cAAclB,KAAK,cAAcmB,KAAK,UAElD,4BACE,2BAAOF,QAAQ,aAAf,cACA,2BAAOC,GAAG,YAAYlB,KAAK,YAAYmB,KAAK,UAE9C,4BACE,2BAAOF,QAAQ,oBAAf,qBACA,2BAAOC,GAAG,mBAAmBlB,KAAK,mBAAmBmB,KAAK,UAE5D,4BACE,2BAAOF,QAAQ,oBAAf,sBACA,2BAAOC,GAAG,mBAAmBlB,KAAK,mBAAmBmB,KAAK,cAE5D,4BACE,2BAAOF,QAAQ,oBAAf,sBACA,2BAAOC,GAAG,mBAAmBlB,KAAK,mBAAmBmB,KAAK,eAG9D,4BAAQA,KAAK,UAAb,sBAKJ,6BACE,yBAAK7C,UAAU,WACb,+BACE,+BACE,4BACE,2CACA,sCACA,wCACA,2CACA,yCACA,gDACA,iDACA,kDAEF,4BACE,4BAAKuB,KAAKlB,MAAMQ,aAChB,4BAAKU,KAAKlB,MAAM2C,QAChB,4BAAKzB,KAAKlB,MAAM4C,UAChB,4BAAK1B,KAAKlB,MAAM6C,aAChB,4BAAK3B,KAAKlB,MAAM8C,WAChB,4BAAK5B,KAAKlB,MAAM+C,kBAChB,4BAAK7B,KAAKlB,MAAMgD,kBAChB,4BAAK9B,KAAKlB,MAAMiD,4B,GA5HXrD,IAAMC,WCcdqD,E,uKATX,OACE,yBAAKvD,UAAU,kBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANkBC,IAAMC,WCanBsD,E,uKATX,OACE,yBAAKxD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUC,IAAMC,WCOJuD,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,a","file":"static/js/main.d26a9726.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <div>\n                <header className=\"App-header\">\n                    <h1>Tracker</h1>\n                </header>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React from 'react';\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      po_number: '',\n      representative: '',\n      customer_name: '',\n      shipping_address: '',\n      email_address: '',\n      invoice_address: '',\n      items: {\n        item_number: '',\n      }\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.objectifyForm = this.objectifyForm.bind(this);\n  }\n\n  objectifyForm(formArray) {\n    //serialize data function\n    var returnArray = {};\n    for (var i = 0; i < formArray.length; i++) {\n      returnArray[formArray[i]['name']] = formArray[i]['value'];\n    }\n    return returnArray;\n  }\n\n  handleChange(event) {\n    this.setState({ [event.target.name]: event.target.value }, () => {\n      const {\n        po_number,\n        representative,\n        customer_name,\n        shipping_address,\n        email_address,\n        invoice_address,\n      } = this.state;\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const form = event.target;\n    const data = this.objectifyForm(form);\n\n    if (window.confirm(\"Ready to save?\" + JSON.stringify(data))) {\n      fetch('./.netlify/functions/projects', {\n        method: 'POST',\n        body: JSON.stringify(data),\n      });\n      console.log('created' + JSON.stringify(data));\n    };\n      event.target.reset();\n  }\n\n  render() {\n    const data = [this.state];\n\n    return (\n      <div>\n        <div className=\"main-form\">\n          <form onChange={this.handleChange}  onSubmit={this.handleSubmit}>\n            <ul>\n              <li>\n                <label htmlFor=\"po_number\">PO Number:</label>\n                <input id=\"po_number\" name=\"po_number\" type=\"text\" />\n              </li>\n              <li>\n                <label htmlFor=\"representative\">Representative:</label>\n                <input id=\"representative\" name=\"representative\" type=\"text\" />\n              </li>\n              <li>\n                <label htmlFor=\"customer_name\">Customer Name:</label>\n                <input id=\"customer_name\" name=\"customer_name\" type=\"text\" />\n              </li>\n              <li>\n                <label htmlFor=\"shipping_address\">Shipping Address:</label>\n                <input id=\"shipping_address\" name=\"shipping_address\" type=\"text\" />\n              </li>\n              <li>\n                <label htmlFor=\"email_address\">Email Address:</label>\n                <input id=\"email_address\" name=\"email_address\" type=\"email\" />\n              </li>\n              <li>\n                <label htmlFor=\"invoice_address\">Paper Invoice Address:</label>\n                <input id=\"invoice_address\" name=\"invoice_address\" type=\"text\" />\n              </li>\n            </ul>\n            <button type=\"submit\">Save Project</button>\n\n          </form>\n        </div>\n\n        <div className='preview'>\n          <table>\n            <tbody>\n              <tr>\n                <th>PO Number</th>\n                <th>Representative</th>\n                <th>Customer Name</th>\n                <th>Shipping</th>\n                <th>Email</th>\n                <th>Paper Invoice Address</th>\n              </tr>\n              <tr>\n                <td>{this.state.po_number}</td>\n                <td>{this.state.representative}</td>\n                <td>{this.state.customer_name}</td>\n                <td>{this.state.shipping_address}</td>\n                <td>{this.state.email_address}</td>\n                <td>{this.state.invoice_address}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Form","import React from 'react';\n\nclass ItemForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      item_numer: '',\n      vendor: '',\n      quantity: '',\n      description: '',\n      unit_cost: '',\n      unit_sales_price: '',\n      insurance_needed: '',\n      sales_tax_needed: ''\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.objectifyForm = this.objectifyForm.bind(this);\n  }\n\n  objectifyForm(formArray) {\n    //serialize data function\n    var returnArray = {};\n    debugger;\n    for (var i = 0; i < formArray.length; i++) {\n      returnArray[formArray[i]['name']] = formArray[i]['value'];\n    }\n    return returnArray;\n  }\n\n  handleChange(event) {\n    this.setState({ [event.target.name]: event.target.value }, () => {\n      const {\n        item_numer,\n        vendor,\n        quantity,\n        description,\n        unit_cost,\n        unit_sales_price,\n        insurance_needed,\n        sales_tax_needed\n      } = this.state;\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const form = event.target;\n    const data = this.objectifyForm(form);\n    if (window.confirm(\"Ready to save?\" + JSON.stringify(data))) {\n      fetch('./.netlify/functions/items', {\n        method: 'POST',\n        body: JSON.stringify(data),\n      });\n      event.target.reset();\n      console.log('created' + JSON.stringify(data));\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"main-form item-form\">\n          <form onChange={this.handleChange} onSubmit={this.handleSubmit}>\n            <ul>\n              <li>\n                <label htmlFor=\"item_number\">Item Number:</label>\n                <input id=\"item_number\" name=\"item_number\" type=\"text\" />\n              </li>\n              <li>\n                <label htmlFor=\"vendor\">Vendor:</label>\n                <input id=\"vendor\" name=\"vendor\" type=\"text\" />\n              </li>\n              <li>\n                <label htmlFor=\"quantity\">Quantity:</label>\n                <input id=\"quantity\" name=\"quantity\" type=\"text\" />\n              </li>\n              <li>\n                <label htmlFor=\"description\">Description:</label>\n                <input id=\"description\" name=\"description\" type=\"text\" />\n              </li>\n              <li>\n                <label htmlFor=\"unit_cost\">Unit Cost:</label>\n                <input id=\"unit_cost\" name=\"unit_cost\" type=\"text\" />\n              </li>\n              <li>\n                <label htmlFor=\"unit_sales_price\">Unit Sales Price:</label>\n                <input id=\"unit_sales_price\" name=\"unit_sales_price\" type=\"text\" />\n              </li>\n              <li>\n                <label htmlFor=\"insurance_needed\">Insurance Needed?:</label>\n                <input id=\"insurance_needed\" name=\"insurance_needed\" type=\"checkbox\" />\n              </li>\n              <li>\n                <label htmlFor=\"sales_tax_needed\">Sales Tax Needed?:</label>\n                <input id=\"sales_tax_needed\" name=\"sales_tax_needed\" type=\"checkbox\" />\n              </li>\n            </ul>\n            <button type='submit'>\n              Add Another Item\n            </button>\n          </form>\n        </div>\n        <div>\n          <div className=\"preview\">\n            <table>\n              <tbody>\n                <tr>\n                  <th>Item Number</th>\n                  <th>Vendor</th>\n                  <th>Quantity</th>\n                  <th>Description</th>\n                  <th>Unit Cost</th>\n                  <th>Unit Sales Price</th>\n                  <th>Insurance Needed?</th>\n                  <th>Salex tax Needed?</th>\n                </tr>\n                <tr>\n                  <td>{this.state.item_number}</td>\n                  <td>{this.state.vendor}</td>\n                  <td>{this.state.quantity}</td>\n                  <td>{this.state.description}</td>\n                  <td>{this.state.unit_cost}</td>\n                  <td>{this.state.unit_sales_price}</td>\n                  <td>{this.state.insurance_needed}</td>\n                  <td>{this.state.sales_tax_needed}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default ItemForm","import React from 'react';\nimport Form from './form.js';\nimport ItemForm from './itemForm.js';\n\nclass CreateProject extends React.Component {\n\n  render() {\n    return (\n      <div className=\"create-project\">\n          <Form></Form>\n          <ItemForm></ItemForm>\n      </div>\n    );\n  }\n}\n\nexport default CreateProject","import React from 'react';\nimport './App.css';\nimport Header from './components/header.js';\nimport CreateProject from './components/createProject.js';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header></Header>\n        <CreateProject></CreateProject>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
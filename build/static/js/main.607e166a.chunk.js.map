{"version":3,"sources":["components/form.js","components/itemForm.js","components/projectDetail.js","components/header.js","App.js","serviceWorker.js","index.js"],"names":["Form","React","Component","props","state","po_number","representative","customer_name","shipping_address","email_address","invoice_address","billing_percentage","handleSubmit","bind","objectifyForm","formArray","returnArray","i","length","event","preventDefault","target","this","setState","name","value","className","onChange","htmlFor","id","type","defaultValue","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gRAqHeA,GCnHQC,IAAMC,UCADD,IAAMC,U,kDFGhC,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,UAAW,GACXC,eAAgB,GAChBC,cAAe,GACfC,iBAAkB,GAClBC,cAAe,GACfC,gBAAiB,GACjBC,mBAAoB,IAEtB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBAZJ,E,0DAeLE,GAGZ,IADA,IAAIC,EAAc,GACTC,EAAI,EAAGA,EAAIF,EAAUG,OAAQD,IACpCD,EAAYD,EAAUE,GAAV,MAAwBF,EAAUE,GAAV,MAEtC,OAAOD,I,mCAGIG,GAAQ,IAAD,OAClBA,EAAMC,iBACOD,EAAME,OAEnBC,KAAKC,SAAL,eAAgBJ,EAAME,OAAOG,KAAOL,EAAME,OAAOI,QAAQ,WAAO,IAAD,EASzD,EAAKrB,MAToD,EAE3DC,UAF2D,EAG3DC,eAH2D,EAI3DC,cAJ2D,EAK3DC,iBAL2D,EAM3DC,cAN2D,EAO3DC,gBAP2D,EAQ3DC,wB,+BAgBJ,OACE,6BACE,yBAAKe,UAAU,aACb,0BAAMC,SAAUL,KAAKV,cACnB,4BACE,4BACE,2BAAOgB,QAAQ,aAAf,cACA,2BAAOC,GAAG,YAAYL,KAAK,YAAYM,KAAK,UAE9C,4BACE,2BAAOF,QAAQ,kBAAf,mBACA,2BAAOC,GAAG,iBAAiBL,KAAK,iBAAiBM,KAAK,UAExD,4BACE,2BAAOF,QAAQ,iBAAf,kBACA,2BAAOC,GAAG,gBAAgBL,KAAK,gBAAgBM,KAAK,UAEtD,4BACE,2BAAOF,QAAQ,oBAAf,qBACA,2BAAOC,GAAG,mBAAmBL,KAAK,mBAAmBM,KAAK,UAE5D,4BACE,2BAAOF,QAAQ,iBAAf,kBACA,2BAAOC,GAAG,gBAAgBL,KAAK,gBAAgBM,KAAK,WAEtD,4BACE,2BAAOF,QAAQ,mBAAf,0BACA,2BAAOC,GAAG,kBAAkBL,KAAK,kBAAkBM,KAAK,UAE1D,4BACE,2BAAOF,QAAQ,sBAAf,uBACA,2BAAOC,GAAG,qBAAqBL,KAAK,qBAAqBM,KAAK,OAAOC,aAAa,SAEpF,4BACE,sDAMR,yBAAKL,UAAU,aAAf,YACYJ,KAAKlB,MAAMC,UADvB,IACkC,6BADlC,QAEQiB,KAAKlB,MAAME,eAFnB,IAEmC,6BAFnC,aAGagB,KAAKlB,MAAMG,cAHxB,IAGuC,6BAHvC,aAIae,KAAKlB,MAAMI,iBAJxB,IAI0C,6BAJ1C,kBAKkBc,KAAKlB,MAAMK,cAL7B,IAK4C,6BAL5C,oBAMoBa,KAAKlB,MAAMM,gBAN/B,IAMgD,6BANhD,cAOcY,KAAKlB,MAAMO,mBAPzB,IAO6C,mC,GApGlCV,IAAMC,YGUV8B,E,uKAVP,OACI,6BACI,4BAAQN,UAAU,cACd,6C,GALCzB,IAAMC,WCqBZ+B,E,uKAbX,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACb,6BACE,kBAAC,EAAD,a,GARMzB,IAAMC,WCKJgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.607e166a.chunk.js","sourcesContent":["import React from 'react';\nimport ItemForm from './itemForm';\nimport ProjectDetail from './projectDetail';\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      po_number: '',\n      representative: '',\n      customer_name: '',\n      shipping_address: '',\n      email_address: '',\n      invoice_address: '',\n      billing_percentage: ''\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.objectifyForm = this.objectifyForm.bind(this);\n  }\n\n  objectifyForm(formArray) {\n    //serialize data function\n    var returnArray = {};\n    for (var i = 0; i < formArray.length; i++) {\n      returnArray[formArray[i]['name']] = formArray[i]['value'];\n    }\n    return returnArray;\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const form = event.target;\n    // const data = this.objectifyForm(form);\n    this.setState({[event.target.name]: event.target.value}, () => {\n      const {\n        po_number,\n        representative,\n        customer_name,\n        shipping_address,\n        email_address,\n        invoice_address,\n        billing_percentage \n      } = this.state;\n      // this.setState(); \n    });\n\n    // if (window.confirm(\"Ready to save?\" + JSON.stringify(data))) {\n    //   fetch('./.netlify/functions/projects', {\n    //     method: 'POST',\n    //     body: JSON.stringify(data),\n    //   });\n    //   event.target.reset();\n    //   console.log('created' + JSON.stringify(data));\n    // };\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"main-form\">\n          <form onChange={this.handleSubmit}>\n            <ul>\n              <li>\n                <label htmlFor=\"po_number\">PO Number:</label>\n                <input id=\"po_number\" name=\"po_number\" type=\"text\" />\n              </li>\n              <li>\n                <label htmlFor=\"representative\">Representative:</label>\n                <input id=\"representative\" name=\"representative\" type=\"text\" />\n              </li>\n              <li>\n                <label htmlFor=\"customer_name\">Customer Name:</label>\n                <input id=\"customer_name\" name=\"customer_name\" type=\"text\" />\n              </li>\n              <li>\n                <label htmlFor=\"shipping_address\">Shipping Address:</label>\n                <input id=\"shipping_address\" name=\"shipping_address\" type=\"text\" />\n              </li>\n              <li>\n                <label htmlFor=\"email_address\">Email Address:</label>\n                <input id=\"email_address\" name=\"email_address\" type=\"email\" />\n              </li>\n              <li>\n                <label htmlFor=\"invoice_address\">Paper Invoice Address:</label>\n                <input id=\"invoice_address\" name=\"invoice_address\" type=\"text\" />\n              </li>\n              <li>\n                <label htmlFor=\"billing_percentage\">Billing Percentage:</label>\n                <input id=\"billing_percentage\" name=\"billing_percentage\" type=\"text\" defaultValue=\"100\" />\n              </li>\n              <li>\n                <button>Create Project</button>\n              </li>\n            </ul>\n          </form>\n        </div>\n\n        <div className='main-form'>\n          project: {this.state.po_number} <br/>\n          rep: {this.state.representative} <br/>\n          customer: {this.state.customer_name} <br/>\n          shipping: {this.state.shipping_address} <br/>\n          email address: {this.state.email_address} <br/>\n          invoice address: {this.state.invoice_address} <br/>\n          billing %: {this.state.billing_percentage} <br/>\n          {/* {this.state.po_number.map((name, index) => (\n            <li key={index}>\n              {name}\n            </li>\n          ))} */}\n      </div>\n      </div>\n    );\n  }\n}\n\n\nexport default Form","import React from 'react';\n\nclass ItemForm extends React.Component {\n  constructor() {\n    super();\n    // this.state = {};\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.objectifyForm = this.objectifyForm.bind(this);\n  }\n\n  objectifyForm(formArray) {\n    //serialize data function\n    var returnArray = {};\n    debugger;\n    for (var i = 0; i < formArray.length; i++) {\n      returnArray[formArray[i]['name']] = formArray[i]['value'];\n    }\n    return returnArray;\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const form = event.target;\n    const data = this.objectifyForm(form);\n    if (window.confirm(\"Ready to save?\" + JSON.stringify(data))) {\n      fetch('./.netlify/functions/items', {\n        method: 'POST',\n        body: JSON.stringify(data),\n      });\n      event.target.reset();\n      console.log('created' + JSON.stringify(data));\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"main-form item-form\">\n        <form onSubmit={this.handleSubmit}>\n          <ul>\n            <li>\n              <label htmlFor=\"item_number\">Item Number:</label>\n              <input id=\"item_number\" name=\"item_number\" type=\"text\" />\n            </li>\n            <li>\n              <label htmlFor=\"vendor\">Vendor:</label>\n              <input id=\"vendor\" name=\"vendor\" type=\"text\" />\n            </li>\n            <li>\n              <label htmlFor=\"quantity\">Quantity:</label>\n              <input id=\"quantity\" name=\"quantity\" type=\"text\" />\n            </li>\n            <li>\n              <label htmlFor=\"description\">Description:</label>\n              <input id=\"description\" name=\"description\" type=\"text\" />\n            </li>\n            <li>\n              <label htmlFor=\"unit_cost\">Unit Cost:</label>\n              <input id=\"unit_cost\" name=\"unit_cost\" type=\"text\" />\n            </li>\n            <li>\n              <label htmlFor=\"unit_sales_price\">Unit Sales Price:</label>\n              <input id=\"unit_sales_price\" name=\"unit_sales_price\" type=\"text\" />\n            </li>\n            <li>\n              <label htmlFor=\"insurance_needed\">Insurance Needed?:</label>\n              <input id=\"insurance_needed\" name=\"insurance_needed\" type=\"checkbox\" />\n            </li>\n            <li>\n              <label htmlFor=\"sales_tax_needed\">Sales Tax Needed?:</label>\n              <input id=\"sales_tax_needed\" name=\"sales_tax_needed\" type=\"checkbox\"/>\n            </li>\n            <li>\n              <button>Add Item to Project</button>\n            </li>\n          </ul>\n        </form>\n      </div>\n    );\n  }\n}\n\n\nexport default ItemForm","import React from 'react';\n\nclass ProjectDetail extends React.Component {\n  constructor() {\n    super();\n    // this.state = {};\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.objectifyForm = this.objectifyForm.bind(this);\n  }\n\n  objectifyForm(formArray) {\n    //serialize data function\n    var returnArray = {};\n    debugger;\n    for (var i = 0; i < formArray.length; i++) {\n      returnArray[formArray[i]['name']] = formArray[i]['value'];\n    }\n    return returnArray;\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const form = event.target;\n    const data = this.objectifyForm(form);\n    if (window.confirm(\"Ready to save?\" + JSON.stringify(data))) {\n      fetch('./.netlify/functions/projects', {\n        method: 'POST',\n        body: JSON.stringify(data),\n      });\n      event.target.reset();\n      console.log('created' + JSON.stringify(data));\n    };\n  }\n\n  render() {\n    return (\n        <div className=\"main-form\">\n        <table>\n            <tr>\n                <th>PO Number</th>\n                <th>Representative </th>\n                <th>Customer </th>\n                <th>Shipping Address </th>\n                <th>Email Address </th>\n                <th>Paper Invoice Address </th>\n                <th>Billing % </th>\n            </tr>\n            <tr>\n                <td>test po number</td>\n                <td>test rep</td>\n                <td>test customer</td>\n                <td>test shipping</td>\n                <td>test email</td>\n                <td>test paper</td>\n                <td>test billing</td>\n            </tr>\n        </table>\n    </div>\n    );\n  }\n}\n\n\nexport default ProjectDetail","import React from 'react';\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <div>\n                <header className=\"App-header\">\n                    <h1>Tracker</h1>\n                </header>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React from 'react';\nimport './App.css';\nimport Form from './components/form.js';\nimport Header from './components/header.js';\n// import ItemForm from './components/itemForm';\nimport ProjectDetail from './components/projectDetail';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header></Header>\n        <div className=\"full-form\">\n          <div>\n            <Form></Form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}